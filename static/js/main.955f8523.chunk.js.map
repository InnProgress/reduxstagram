{"version":3,"sources":["actions.js","data/posts.js","data/comments.js","reducers.js","store.js","components/PostFigure.js","components/PostsList.js","components/Comments.js","components/SinglePost.js","App.js","serviceWorker.js","index.js"],"names":["addPost","title","imageUrl","type","addLike","id","parseInt","addComment","author","text","removeComment","picture","likes","postId","initialState","posts","comments","lastPostId","length","lastCommentId","combineReducers","state","action","mutatedArray","index","findIndex","obj","newArray","comment","splice","createStore","mainReducer","window","__REDUX_DEVTOOLS_EXTENSION__","mapStateToProps","ownProps","filter","post","find","mapDispatchToProps","dispatch","bindActionCreators","actions","connect","props","className","to","src","alt","transitionName","transitionEnterTimeout","transitionLeaveTimeout","key","onClick","store","map","React","useState","setAuthor","setComment","onSubmit","e","preventDefault","alert","submitComment","name","value","placeholder","onChange","target","useParams","App","path","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.955f8523.chunk.js","sourcesContent":["export const addPost = (title, imageUrl) => {\r\n    return {\r\n        type: 'ADD_POST',\r\n        title,\r\n        imageUrl\r\n    }\r\n}\r\n\r\nexport const addLike = id => {\r\n    return {\r\n        type: 'ADD_LIKE_TO_POST',\r\n        id: parseInt(id)\r\n    }\r\n}\r\n\r\nexport const addComment = (author, text, id) => {\r\n    return {\r\n        type: 'ADD_COMMENT',\r\n        author,\r\n        text,\r\n        id: parseInt(id)\r\n    }\r\n}\r\n\r\nexport const removeComment = id => {\r\n    return {\r\n        type: 'REMOVE_COMMENT',\r\n        id: parseInt(id)\r\n    }\r\n}","export default [{\r\n        id: 1,\r\n        title: \"Test 1\",\r\n        picture: \"https://static.toiimg.com/thumb/msid-58515713,width-748,height-499,resizemode=4,imgsize-145905/Nice-in-pictures.jpg\",\r\n        likes: 69\r\n    },\r\n    {\r\n        id: 2,\r\n        title: \"Test post 2\",\r\n        picture: \"https://preview.redd.it/n1ce9gw0ak141.jpg?width=960&crop=smart&auto=webp&s=73e5d27a1f7744d57d501e60536084c246311bbd\",\r\n        likes: 420\r\n    },\r\n    {\r\n        id: 3,\r\n        title: \"Test post 3\",\r\n        picture: \"https://preview.redd.it/ioqx9t74xk141.jpg?width=640&crop=smart&auto=webp&s=c525589415993a7b78e19b8d59bed7c6365cd59f\",\r\n        likes: 0\r\n    }\r\n];","export default [\r\n    {\r\n        id: 1,\r\n        postId: 1,\r\n        author: 'Admin',\r\n        text: 'Hello'\r\n    }\r\n];","import posts from './data/posts';\r\nimport comments from './data/comments';\r\nimport { combineReducers } from 'redux';\r\n\r\nconst initialState = {\r\n  posts,\r\n  comments\r\n};\r\n\r\nlet lastPostId = posts[posts.length - 1].id || 0;\r\nlet lastCommentId = comments[comments.length - 1].id || 0;\r\n\r\nconst postsReducer = (state = initialState.posts, action) => {\r\n  switch (action.type) {\r\n    case \"ADD_POST\": {\r\n      lastPostId++;\r\n      return [\r\n        ...state,\r\n        {\r\n          id: lastPostId,\r\n          title: action.title,\r\n          imageUrl: action.imageUrl,\r\n          likes: 0\r\n        }\r\n      ];\r\n    }\r\n    case \"ADD_LIKE_TO_POST\": {\r\n      const mutatedArray = [...state];\r\n      const index = mutatedArray.findIndex(obj => obj.id === action.id);\r\n      mutatedArray[index].likes++;\r\n      return mutatedArray;\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst commentsReducer = (state = initialState.comments, action) => {\r\n    switch(action.type) {\r\n        case 'ADD_COMMENT': {\r\n          lastCommentId ++;\r\n          return [\r\n            ...state,\r\n            {\r\n              id: lastCommentId,\r\n              postId: action.id,\r\n              author: action.author,\r\n              text: action.text\r\n            }\r\n          ];\r\n        }\r\n        case 'REMOVE_COMMENT': {\r\n          const newArray = [...state];\r\n          const index = state.findIndex(comment => comment.id === action.id);\r\n          newArray.splice(index, 1);\r\n          return newArray;\r\n        }\r\n        default:\r\n          return state;\r\n    }\r\n}\r\n\r\nexport default combineReducers({ posts: postsReducer, comments: commentsReducer });","import { createStore, bindActionCreators } from 'redux';\r\n\r\nimport * as actions from './actions';\r\nimport mainReducer from './reducers';\r\n\r\nexport default createStore(mainReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\nexport const mapStateToProps = (state, ownProps) => {\r\n    if (!ownProps.id) return state;\r\n\r\n    const comments = state.comments.filter(comment => comment.postId === parseInt(ownProps.id));\r\n    return {\r\n        post: {\r\n            ...state.posts.find(post => post.id === parseInt(ownProps.id)),\r\n            comments\r\n        }\r\n    }\r\n};\r\n\r\nexport const mapDispatchToProps = dispatch => {\r\n    return {\r\n        ...bindActionCreators({ ...actions }, dispatch) \r\n    }\r\n};","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport CSSTransitionGroup from 'react-addons-css-transition-group';\r\n\r\nimport { mapStateToProps, mapDispatchToProps } from '../store';\r\n\r\nconst PostFigure = props => {\r\n    const post = props.post;\r\n    \r\n    return (\r\n        <figure className=\"grid-figure\">\r\n            <div className=\"grid-photo-wrap\">\r\n                <Link to={\"/post/\" + post.id}>\r\n                    <img className=\"grid-photo\" src={post.picture} alt={post.title} />\r\n                </Link>\r\n\r\n                <CSSTransitionGroup transitionName=\"like\" transitionEnterTimeout={500} transitionLeaveTimeout={500}>\r\n                    <span key={post.likes} className=\"likes-heart\">{post.likes}</span>\r\n                </CSSTransitionGroup>\r\n\r\n                <figcaption>\r\n                    <p>{post.title}</p>\r\n\r\n                    <div className=\"control-buttons\">\r\n                        <button onClick={() => props.addLike(post.id)} className=\"likes\">\r\n                            ❤ {post.likes}\r\n                        </button>\r\n                        <Link to={\"/post/\" + post.id} className=\"button\">✎ {post.comments.length}</Link>\r\n                    </div>\r\n                </figcaption>\r\n                \r\n            </div>\r\n        </figure>\r\n    );\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PostFigure);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { mapStateToProps } from '../store';\r\n\r\nimport PostFigure from './PostFigure';\r\n\r\nconst PostsList = store => {    \r\n    return (\r\n        <div className=\"photo-grid\">\r\n            {store.posts && store.posts.map(post => <PostFigure key={post.id} id={post.id} />)}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default connect(mapStateToProps)(PostsList);","import React from 'react'\r\nimport { connect } from 'react-redux';\r\n\r\nimport {\r\n    mapDispatchToProps,\r\n    mapStateToProps\r\n} from '../store';\r\n\r\nconst Comments = props => {\r\n    const comments = props.post.comments;\r\n\r\n    const [author, setAuthor] = React.useState('');\r\n    const [comment, setComment] = React.useState('');\r\n    \r\n    const submitComment = e => {\r\n        e.preventDefault();\r\n        if(!author || !comment) return alert(\"Error! Author or comment text isn't entered\");\r\n        props.addComment(author, comment, props.id);\r\n        setAuthor('');\r\n        setComment('');\r\n    };\r\n\r\n    return (\r\n        <div className=\"comments\">\r\n            {comments && comments.map((comment, index) => {\r\n                return(\r\n                    <div className=\"comment\" key={comment.text + index}>\r\n                        <p>\r\n                            <strong>{comment.author}</strong>\r\n                            {comment.text}\r\n                            <button className=\"remove-comment\" onClick={() => props.removeComment(comment.id)}>x</button>    \r\n                        </p>    \r\n                    </div>\r\n                )\r\n            })}\r\n\r\n            <form className=\"comment-form\" onSubmit={e => submitComment(e)}>\r\n                <input type=\"text\" name=\"author\" value={author} placeholder=\"author\" onChange={e => setAuthor(e.target.value)} />\r\n                <input type=\"text\" name=\"comment\" value={comment} placeholder=\"comment\" onChange={e => setComment(e.target.value)} />\r\n                <button>Submit</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Comments);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useParams } from 'react-router';\r\n\r\nimport PostFigure from './PostFigure';\r\nimport Comments from './Comments';\r\n\r\nconst SinglePost = () => {\r\n    const id = useParams().id;\r\n\r\n    return (\r\n        <div className=\"single-photo\">\r\n            <PostFigure id={id} />\r\n            <Comments id={id} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default connect()(SinglePost);","import React from 'react';\nimport { Route, Link, Switch } from 'react-router-dom';\n\nimport PostsList from './components/PostsList';\nimport SinglePost from './components/SinglePost';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Link to=\"/\"><h1>Reduxstagram</h1></Link>\n      </header>\n    \n      <Switch>\n        <Route path=\"/post/:id\">\n          <SinglePost />\n        </Route>\n        <Route path=\"/\">\n          <PostsList />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\n// import './styles/style.styl';\nimport './styles/style.css';\n\nimport store from './store';\n\nReactDOM.render((\n    <Provider store={store}>\n        <Router>\n            <App />\n        </Router>\n    </Provider>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}